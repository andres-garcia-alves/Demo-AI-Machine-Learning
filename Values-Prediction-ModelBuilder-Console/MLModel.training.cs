﻿// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace ML_Model_Wizard_Console
{
    public partial class MLModel
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(@"ocean_proximity", @"ocean_proximity", outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                .Append(mlContext.Transforms.ReplaceMissingValues(new[] {
                    new InputOutputColumnPair(@"longitude", @"longitude"),
                    new InputOutputColumnPair(@"latitude", @"latitude"),
                    new InputOutputColumnPair(@"housing_median_age", @"housing_median_age"),
                    new InputOutputColumnPair(@"total_rooms", @"total_rooms"),
                    new InputOutputColumnPair(@"total_bedrooms", @"total_bedrooms"),
                    new InputOutputColumnPair(@"population", @"population"),
                    new InputOutputColumnPair(@"households", @"households"),
                    new InputOutputColumnPair(@"median_income", @"median_income") }))
                .Append(mlContext.Transforms.Concatenate(@"Features", new[] {
                    @"ocean_proximity", @"longitude", @"latitude", @"housing_median_age",
                    @"total_rooms",@"total_bedrooms",@"population",@"households",@"median_income" }))
                .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                .Append(mlContext.Regression.Trainers.FastTreeTweedie(new FastTreeTweedieTrainer.Options() {
                    NumberOfLeaves=5, MinimumExampleCountPerLeaf=110, NumberOfTrees=204, MaximumBinCountPerFeature=429, FeatureFraction=0.99999999,
                    LearningRate=0.999999776672986, LabelColumnName=@"median_house_value", FeatureColumnName=@"Features" }));

            return pipeline;
        }
    }
}
